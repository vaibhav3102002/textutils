{"version":3,"sources":["componets/Navbar.js","componets/Textform.js","componets/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","home","textMode","onClick","toggleMode","htmlFor","Textform","useState","text","setText","heading","rows","cols","value","onChange","event","target","newtext","toUpperCase","console","log","showAlert","toLowerCase","newText","trim","list","split","emptyList","forEach","e","a","substr","push","join","length","count","i","sentanceCount","Alert","alert","role","msg","defaultProps","about","App","setmode","setTextMode","setAlert","message","setTimeout","document","body","style","backgroundColor","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oMAMe,SAASA,EAAOC,GAC7B,OACE,mCAEE,sBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,UACE,sBAAKD,UAAU,kBAAf,UACE,mBAAGA,UAAU,eAAeE,KAAK,IAAjC,SAAsCH,EAAMI,QAC5C,wBAAQH,UAAU,iBAAiBI,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACE,sBAAMJ,UAAU,0BAElB,qBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,SACE,oBAAIL,UAAU,kCAAd,SACE,oBAAIA,UAAU,WAAd,SACE,mBAAGA,UAAU,kBAAkB,eAAa,OAAOE,KAAK,IAAxD,SAA6DH,EAAMO,gBAW3E,sBAAKN,UAAS,sCAAiCD,EAAMQ,UAArD,UACE,uBAAOP,UAAU,mBAAmBI,KAAK,WAAWC,GAAG,yBAAyBG,QAAST,EAAMU,aAC/F,uBAAOT,UAAU,oBAAoBU,QAAQ,yBAA7C,0BAAiFX,EAAMQ,SAAvF,oBC1BK,SAASI,EAASZ,GAE7B,MAAwBa,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAqDA,OACI,qCAEI,6BAAKf,EAAMgB,UACX,qBAAKf,UAAU,YAAf,SAEI,0BAAUA,UAAU,eAAeK,GAAG,QAAQW,KAAK,IAAIC,KAAK,MAAMC,MAAOL,EAAMM,SAvDpE,SAACC,GACpBN,EAAQM,EAAMC,OAAOH,YAwDjB,wBAAQlB,UAAU,kBAAkBQ,QArDtB,WAElB,IAAIc,EAAUT,EAAKU,cACnBC,QAAQC,IAAIH,GACZR,EAAQQ,GACRvB,EAAM2B,UAAU,mCAAmC,YAgD/C,iCACA,wBAAQ1B,UAAU,uBAAuBQ,QA/C1B,WACnB,IAAIc,EAAUT,EAAKc,cACnBb,EAAQQ,GACRvB,EAAM2B,UAAU,mCAAmC,YA4C/C,iCACA,wBAAQ1B,UAAU,uBAAuBQ,QA3C3B,WAClB,IAAIoB,EAAQf,EAAKgB,OACjBf,EAAQc,GACR7B,EAAM2B,UAAU,4BAA4B,YAwCxC,uBAEA,wBAAQ1B,UAAU,uBAAuBQ,QAnC5B,WACpB,IAAIsB,EAAKjB,EAAKkB,MAAM,KAChBC,EAAU,GACbF,EAAKG,SAAQ,SAASC,GAClB,IAAIC,EAAED,EAAE,GAAGX,cAAcW,EAAEE,OAAO,GAChCJ,EAAUK,KAAKF,MAErB,IAAIb,EAAQU,EAAUM,KAAK,KAC3BxB,EAAQQ,GACRvB,EAAM2B,UAAU,uDAAuD,YA0BjE,2CACA,wBAAQ1B,UAAU,uBAAuBQ,QAzC1B,WAEnBM,EADY,IAEZf,EAAM2B,UAAU,kBAAkB,YAsC9B,mBAKA,sBAAK1B,UAAU,iBAAf,UACI,mDACA,8BAAG,4BAAIa,EAAKkB,MAAM,KAAKQ,SAAvB,aAA4C,kCAAK1B,EAAK0B,UAAtD,iCAA+F,4BA/BvF,WAEhB,IADA,IAAIC,EAAM,EACFC,EAAE,EAAEA,GAAI5B,EAAK0B,OAAQE,IACZ,MAAV5B,EAAK4B,IACJD,IAGR,OAAOA,EAwBoGE,KAAnG,iBAEA,8BAAG,4BAAI,KAAQ7B,EAAKkB,MAAM,KAAKQ,SAA/B,oDAEA,yCAGA,4BAAI1B,EAAK0B,OAAO,EAAE1B,EAAK,6DCtFxB,SAAS8B,EAAM5C,GAG1B,OAAkB,MAAfA,EAAM6C,MAGD,mCACI,sBAAK5C,UAAS,sBAAiBD,EAAM6C,MAAMxC,KAA7B,gCAAiEyC,KAAK,QAApF,UACI,uCAAU9C,EAAM6C,MAAMxC,KAAtB,OADJ,IAC2CL,EAAM6C,MAAME,SAW5D,6BFwBXhD,EAAOiD,aAAe,CACpBC,MAAO,SGqCMC,MApEf,WACE,MAAwBrC,mBAAS,SAAjC,mBAAOX,EAAP,KAAaiD,EAAb,KACA,EAAgCtC,mBAAS,SAAzC,mBAAOL,EAAP,KAAiB4C,EAAjB,KACA,EAA0BvC,mBAAS,MAAnC,mBAAOgC,EAAP,KAAcQ,EAAd,KAEM1B,EAAY,SAAC2B,EAASjD,GAC1BgD,EAAS,CACPN,IAAKO,EACLjD,KAAMA,IAERkD,YAAW,WACTF,EAAS,QACR,MA8BL,OACE,qCAEI,cAACtD,EAAD,CAAQK,MAAM,YAAYG,KAAK,OAAOL,KAAMA,EAAMQ,WA9BrC,WACJ,UAATR,GACFiD,EAAQ,QACRK,SAASC,KAAKC,MAAMC,gBAAkB,iBACtCH,SAASC,KAAKC,MAAME,MAAQ,SAC5BR,EAAY,SACZzB,EAAU,6BAA8B,aAUxCwB,EAAQ,SACRK,SAASC,KAAKC,MAAMC,gBAAkB,QACtCH,SAASC,KAAKC,MAAME,MAAQ,QAC5BR,EAAY,QACZzB,EAAU,8BAA+B,aAUmCnB,SAAUA,IACpF,cAACoC,EAAD,CAAOC,MAAOA,IAGd,qBAAK5C,UAAU,YAAf,SAOE,cAACW,EAAD,CAAUe,UAAWA,EAAWX,QAAQ,wBAAwBd,KAAMA,UC3DjE2D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhB,SAASiB,eAAe,SAM1BZ,K","file":"static/js/main.13e3a9c0.chunk.js","sourcesContent":["// rfc for react fuction\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">{props.home}</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/About\">{props.about}</Link>\r\n              </li> */}\r\n\r\n\r\n            </ul>\r\n\r\n          </div>\r\n        </div>\r\n        <div className={`form-check form-switch text-${props.textMode}`}>\r\n          <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode} />\r\n          <label className='form-check-label ' htmlFor=\"flexSwitchCheckDefault\">{`Enable ${props.textMode} Mode `}</label>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  )\r\n}\r\n//proptype  can put the constraint on the which type of prop can be put into the componet\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  about: PropTypes.string,\r\n  home: PropTypes.string\r\n}\r\n//we can also set the default props as if we didn't have any value in the componet we will use the default value which is set here if we didn't give any value in the componet then it will not show that value\r\nNavbar.defaultProps = {\r\n  about: \"About\"\r\n};","// //concept of states-for this we will use hook useState\r\n// //What is hook-They let you use state and other React features without writing a class.\r\n\r\nimport React, { useState } from 'react'\r\n\r\n\r\nexport default function Textform(props) {\r\n\r\n    const [text, setText] = useState(\"\");//What this line saying is Text is my varible and its value is Enter your text and if we want to update this text value we do it by useText function \r\n    //rat lo this syntax\r\n    // text=\"Enter your text here 23\"//Thsi is the wrong way to update the text\r\n    // setText(\"Enter your text here 23\");//Right way to update text\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value)//by doing this nowwecan type in this text area also\r\n\r\n    }\r\n    const handleUpClick = () => {\r\n        // console.log(\"upper click button was clicked\" +text);\r\n        let newtext = text.toUpperCase()\r\n        console.log(newtext);\r\n        setText(newtext)\r\n        props.showAlert(\"Text is converted into uppercase\",\"success\")\r\n    }\r\n    const handleLowClick = () => {\r\n        let newtext = text.toLowerCase()\r\n        setText(newtext)\r\n        props.showAlert(\"Text is converted into lowercase\",\"success\")\r\n    }\r\n    const handleTrimClick=()=>{\r\n        let newText=text.trim()\r\n        setText(newText)\r\n        props.showAlert(\"Text is converted trimmed\",\"success\")\r\n    }\r\n    const handleClearClick=()=>{\r\n        let newtext=\"\"\r\n        setText(newtext)\r\n        props.showAlert(\"Text is cleared\",\"success\")\r\n    }\r\n    const handleCapClick=()=>{\r\n     var list=text.split(\" \")\r\n     let emptyList=[]\r\n      list.forEach(function(e){\r\n          var a=e[0].toUpperCase()+e.substr(1)\r\n            emptyList.push(a)\r\n      })\r\n      let newtext=emptyList.join(\" \")\r\n      setText(newtext)\r\n      props.showAlert(\"Every first letter of text is converted into capital\",\"success\")\r\n\r\n    }\r\n    const sentanceCount=()=>{\r\n        let count=0;\r\n        for(var i=0;i<=(text.length);i++){\r\n            if(text[i]===\".\"){\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3 my-4\">\r\n\r\n                <textarea className=\"form-control\" id=\"mybox\" rows=\"7\" cols=\"100\" value={text} onChange={handleOnChange}></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary\" onClick={handleUpClick}>Covert to uppercase</button>\r\n            <button className=\"btn btn-primary mx-3\" onClick={handleLowClick}>Covert to lowercase</button>\r\n            <button className=\"btn btn-primary mx-3\" onClick={handleTrimClick}>Trim Text</button>\r\n            {/* <button className=\"btn btn-primary mx-3\" onClick={handleCopyClick}>Copy Text</button> */}\r\n            <button className=\"btn btn-primary mx-3\" onClick={handleCapClick}>Capitalize every first letter</button>\r\n            <button className=\"btn btn-primary mx-3\" onClick={handleClearClick}>Clear</button>\r\n            {/* H.w-\r\n            create the triming btn,clear btn,replacing btn,capitalizing btn */}\r\n            \r\n\r\n            <div className=\"container my-4\">\r\n                <h2>Your Text summary</h2>\r\n                <p><b>{text.split(\" \").length}</b> words and<b> {text.length}</b> characters in above text and <b>{sentanceCount()}</b> Sentences </p>\r\n                {/* Add sentace reader ,space reader, puctuation reader,paragraph reader */}\r\n                <p><b>{0.008 * text.split(\" \").length}</b> minutes will be enough to read the above text</p>\r\n                {/* 0.008 minutes it takes to read one word */}\r\n                <h2>\r\n                    Preview\r\n                </h2>\r\n                <p>{text.length>0?text:\"Enter something in the text box to preview it here\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    \r\n     \r\n    if(props.alert != null){\r\n        return (\r\n       \r\n            <>   \r\n                <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                    <strong> {props.alert.type} </strong> {props.alert.msg}  \r\n                </div>\r\n    \r\n            </>\r\n       \r\n        )\r\n\r\n\r\n    }\r\n   else{\r\n       return(\r\n           <>\r\n           </>\r\n       )\r\n   }\r\n}\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport React, { useState } from 'react'//imrs for impoting react and useState\n// import About from './componets/About';\nimport Navbar from './componets/Navbar';\nimport Textform from './componets/Textform';\nimport Alert from './componets/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setmode] = useState('light');\n  const [textMode, setTextMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 2000);\n  }\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setmode(\"dark\")\n      document.body.style.backgroundColor = \"rgb(4, 15, 42)\";\n      document.body.style.color = \"yellow\";\n      setTextMode('light')\n      showAlert(\"Dark mode has been enabled\", \"success\")\n\n      // setInterval(() => {\n      //   document.title=\"TextUtils-DarkMode\"\n      // }, 4000);\n      // setInterval(() => {\n      //   document.title=\"Intall a virus\"\n      // }, 1500);\n    }\n    else {\n      setmode(\"light\")\n      document.body.style.backgroundColor = \"white\";\n      document.body.style.color = \"black\";\n      setTextMode('dark')\n      showAlert(\"Light mode has been enabled\", \"success\")\n\n\n    }\n\n\n  }\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar title=\"Textutils\" home=\"Home\" mode={mode} toggleMode={toggleMode} textMode={textMode} />\n        <Alert alert={alert} />\n\n\n        <div className=\"container\">\n        {/* <Switch> */}\n          {/* <Route exact path=\"/About\"> */}\n            {/* <About mode={mode} /> */}\n          {/* </Route> */}\n          \n          {/* <Route exact path=\"/Textform\"> */}\n          <Textform showAlert={showAlert} heading=\"Enter your text here \" mode={mode} />\n          {/* </Route>\n        </Switch> */}\n\n          \n          \n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}